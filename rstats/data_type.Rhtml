<!DOCTYPE html>
<head>
  <meta charset='utf-8'/>
  <meta name='viewport' content='width=device-width, initial-scale=1'>
  <title>RStats</title>
  <link rel='stylesheet' 
        href='../style.css'/>
  <link rel='stylesheet' 
        href='https://use.fontawesome.com/releases/v5.8.1/css/all.css'
        integrity='sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf'
        crossorigin='anonymous'/>
  <link rel='stylesheet' 
        href='https://fonts.googleapis.com/css2?family=Roboto+Slab:wght@200;300;400&display=swap'/>
  <link rel='stylesheet' 
        href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css'/>
</head>

<body>

  <div class = 'topBar'>
    <div class = 'mainTitle'><span class='subtle'>RStats:</span> Data Type</div>
  </div>

  <div class = 'mainBody'>
    <div class = 'pageHead'>Types of data in R</div>

    <div class = 'sectionBody'>
      <span style='color:red;'>TODO - what is data type.</span> The type of data 
      affects how R interacts with values. Understanding data types is important 
      to understanding how R is handling data and will help users prevent/solve 
      issues when developing programs. For most users, there are four key types of 
      data: logical, integer, double and character types. The type of data values 
      can be returned using the <span class = 'inlineF'>typeof</span> function.
    </div>

    <div class = 'sectionHead'>Logical</div>

    <div class = 'sectionBody'>
      Logical data is the most simple of the four data types. Values can be either 
      <span class = 'inline'>TRUE</span> or <span class = 'inline'>FALSE</span>. 
      These values can be technically abbreviated to <span class = 'inline'>T</span> 
      and <span class = 'inline'>F</span> respectively, but it should be avoided 
      because these values can be used as variable names (while <span class = 
      'inline'>TRUE</span> and <span class = 'inline'>FALSE</span> cannot). Because 
      these are the most simple data type, they take up very little space in memory 
      - use them where possible to maximise efficiency.
    </div>

<!--begin.rcode results='hold'
# Two logical type data values
c(TRUE, FALSE)

# Return the type of data
typeof(c(TRUE, FALSE))
end.rcode-->


    <div class = 'sectionHead'>Integer</div>

    <div class = 'sectionBody'>
      Integer type data is data that whole numbers - those used for counts, 
      phone numbers, PIN codes etc.. Values are specified as integer type data 
      by providing whole numbers suffixed with <span class='inline'>L</span>.
    </div>

<!--begin.rcode results='hold'
# Three integer type data values
c(1L, 2L, 3L)

# Return the type
typeof(c(1L, 2L, 3L))
end.rcode-->

    <div class = 'sectionBody'>
      Integer type data values can be any where between roughly -2.15B and 2.15B, 
      which sounds like a lot but can quickly lead to problems and users should 
      be aware of these limitations. One could not, for example, express the 
      global population as an integer type data value because -2.15B < 7.8B > 
      2.15B, as shown here where the <span class='inlineF'>is.*</span> family 
      of functions is used.
    </div>
    
<!--begin.rcode results='hold'
# Global population (roughly 7.8B) 
is.integer(7800000000L)
end.rcode-->


    <div class = 'sectionHead'>Double</div>

    <div class = 'sectionBody'>
      Double double double.
    </div>

<!--begin.rcode results='hold'
# Three double type data values
c(11.6, 13.4, 15.5)

# Return the type
typeof(c(11.6, 13.4, 15.5))
end.rcode-->

    <div class = 'sectionBody'>
      Double double double.
    </div>
    
<!--begin.rcode results='hold'
# Whole numbers will be double type if the L is omitted
typeof(c(1, 2, 3))
end.rcode-->


    <div class = 'sectionHead'>Character</div>

    <div class = 'sectionBody'>
      Character character character. - Both can be used by "" is preferred.
    </div>

<!--begin.rcode results='hold'
# Four character type data values
c("The", "quick", "brown", "fox")

# Return the type
typeof(c("The", "quick", "brown", "fox"))
end.rcode-->

    <div class = 'sectionBody'>
      Character character character.
    </div>
    
<!--begin.rcode results='hold'
# Either type of qoutes can be used
c('The', 'quick', 'brown', 'fox')

# But a character string is contained in a matching pair
c("The', 'quick', 'brown', 'fox")

# This allows strings to contain quotes
c("Don't use the wrong quotes here!")
end.rcode-->


    <div class = 'sectionHead'>Summary</div>

    <div class = 'sectionBody'>
      Summarise the section.
    </div>
    
  </div>

</body>

<footer>
</footer>

<script>
function openNav() {
  document.getElementById('mySidenav').style.width = '80%';
  document.getElementById('mySidenav').style.boxShadow = '0 0 100000px 100000px rgb(255,255,255,0.3)';
}

function closeNav() {
  document.getElementById('mySidenav').style.width = '0';
  document.getElementById('mySidenav').style.boxShadow = '0 0 0 0 rgb(0,0,0,0)';
}
</script>


<script>
var acc = document.getElementsByClassName('accordion');
var i;

for (i = 0; i < acc.length; i++) {
  acc[i].addEventListener('click', function() {
    this.classList.toggle('active');
    var panel = this.nextElementSibling;
    if (panel.style.maxHeight) {
      panel.style.maxHeight = null;
    } else {
      panel.style.maxHeight = panel.scrollHeight + 'px';
    }
  });
}
</script>

